#!/usr/bin/env node

const package = require('../package.json')
const os = require('os')
const fs = require('fs')
const child_process = require('child_process')
const UUID = require('pure-uuid')
//const rimraf = require('rimraf')

if (!process.env.GIT_DIR) {
  console.error('error: no GIT_DIR defined')
  process.exit(1)
}

const commander = require('commander')
const program = new commander.Command()
program.version(package.version)

program
  .option('-p, --prefix <prefix>', 'prefix used throughout the deployment (default: deployment)', 'deployment')
  .option('-b, --branches <branches>', 'branches to deploy (default: master)', value => value.split(' '), [ 'master' ])
  .option('-m, --master-only <folders>', 'folders to deploy only when in master (default: backend, apache)', value => value.split(','), [ 'backend', 'apache' ])
  .option('-q, --quiet', 'be quiet')

program.parse(process.argv)

async function exec(cmd) {
  return new Promise((resolve, reject) => {
    child_process.exec(cmd, {}, (error, stdout, stderr) => {
      if (error) {
        reject({ error, stderr })
      } else {
        resolve({ stdout, stderr })
      }
    })
  })
}

async function spawn(cmd, args = []) {
  return new Promise((resolve, reject) => {
    const p = child_process.spawn(cmd, args)
    if (!program.quiet) {
      p.stdout.on('data', data => console.log('stdout:', data.toString()))
      p.stderr.on('data', data => console.log('stdout:', data.toString()))
    }
    p.on('close', code => resolve(code))
  })
}

async function getChangedPathsForBranch(branch) {
  const { stdout: changed, stderr: error } = await exec(`git diff-tree -r --name-only --no-commit-id ${branch} ${branch}@{1} | cut -d/ -f1 | sort | uniq`)

  if (error) {
    if (error.trim().endsWith('only has 1 entries.')) {
      const { stdout: folders } = await exec(`git ls-files --with-tree ${branch} | cut -d/ -f1 | sort | uniq`)
      return folders.split('\n')
    }
    throw new Error(error)
  }

  return changed.split('\n')
}

async function makeTempDir(prefix = 'git-deploy-') {
  const tmp = os.tmpdir() + '/' + prefix + new UUID(4).format()
  return new Promise((resolve, reject) => {
    fs.mkdir(tmp, err => {
      if (err) reject(err)
      else resolve(tmp)
    })
  })
}

async function checkout(branch, folder) {
  return exec(`git --work-tree ${folder} checkout ${branch} -- .`)
}

function isMasterOnly(branch, folder) {
  return branch === 'master' || !(program.masterOnly.includes(folder))
}

function containsDeploymentScript(folder) {
  return fs.existsSync(`${folder}/deploy.sh`)
}

async function executeDeploymentScript(branch, folder) {
  const dir = process.cwd()
  try {
    process.chdir(`${folder}`)
    if (!program.quiet) {
      console.log(`Executing ${folder}/deploy.sh`)
    }
    await spawn(`./deploy.sh`, [ branch ])
  } finally {
    process.chdir(dir)
  }
}

async function processBranchDeployment (branch) {
  const temp = await makeTempDir(`${program.prefix}-${branch}-`)
  const changed = await getChangedPathsForBranch(branch)
  if (changed.length > 0) {
    await checkout(branch, temp)
    try {
      for (const i in changed) {
        const folder = changed[i]
        if (isMasterOnly(branch, folder)) {
          if (containsDeploymentScript(`${temp}/${folder}`)) {
            await executeDeploymentScript(branch, `${temp}/${folder}`)
          }
        } else if (!program.quiet) {
          console.log(`Skipping folder ${folder} in branch ${branch} because it is marked as "master-only"`)
        }
      }
    } finally {
      //rimraf.sync(temp)
    }
  }
}

async function main (branches) {
  const currentDir = process.cwd()

  for (const branch of branches) {
    await processBranchDeployment(branch)
  }

  process.chdir(currentDir)
}

main(program.branches)
